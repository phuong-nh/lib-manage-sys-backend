openapi: 3.0.0
info:
  title: Library Management System API
  version: 0.0.1
servers:
  - url: 'http://localhost:8080'

paths:

  # Author API Endpoints
  /authors:
    get:
      summary: Get a list of authors
      responses:
        '200':
          description: A list of authors
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Author'

    post:
      summary: Create a new author
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Author'
      responses:
        '201':
          description: Author created successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Author'
        '400':
          description: Invalid input
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'

  /authors/{authorId}:
    get:
      summary: Get an author by ID
      parameters:
        - name: authorId
          in: path
          required: true
          schema:
            type: integer
      responses:
        '200':
          description: An author object
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Author'
        '404':
          description: Author not found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'

    put:
      summary: Update an author by ID
      parameters:
        - name: authorId
          in: path
          required: true
          schema:
            type: integer
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Author'
      responses:
        '200':
          description: Author updated successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Author'
        '400':
          description: Invalid input
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        '404':
          description: Author not found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'

    delete:
      summary: Delete an author by ID
      parameters:
        - name: authorId
          in: path
          required: true
          schema:
            type: integer
      responses:
        '204':
          description: Author deleted successfully
        '404':
          description: Author not found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'

  # Book API Endpoints
  /books:
    get:
      summary: Get a list of books
      responses:
        '200':
          description: A list of books
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Book'

    post:
      summary: Create a new book
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Book'
      responses:
        '201':
          description: Book created successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Book'
        '400':
          description: Invalid input
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'

  /books/{bookId}:
    get:
      summary: Get a book by ID
      parameters:
        - name: bookId
          in: path
          required: true
          schema:
            type: integer
      responses:
        '200':
          description: A book object
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Book'
        '404':
          description: Book not found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'

    put:
      summary: Update a book by ID
      parameters:
        - name: bookId
          in: path
          required: true
          schema:
            type: integer
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Book'
      responses:
        '200':
          description: Book updated successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Book'
        '400':
          description: Invalid input
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        '404':
          description: Book not found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'

    delete:
      summary: Delete a book by ID
      parameters:
        - name: bookId
          in: path
          required: true
          schema:
            type: integer
      responses:
        '204':
          description: Book deleted successfully
        '404':
          description: Book not found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'

  # User API Endpoints
  /users:
    get:
      summary: Get a list of users
      responses:
        '200':
          description: A list of users
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/User'

    post:
      summary: Create a new user
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/User'
      responses:
        '201':
          description: User created successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/User'
        '400':
          description: Invalid input
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'

  /users/{userId}:
    get:
      summary: Get a user by ID
      parameters:
        - name: userId
          in: path
          required: true
          schema:
            type: integer
      responses:
        '200':
          description: A user object
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/User'
        '404':
          description: User not found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'

    put:
      summary: Update a user
      parameters:
        - name: userId
          in: path
          required: true
          schema:
            type: integer
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/User'
            examples:
              user:
                value:
                  givenName: "John"
                  surName: "Doe"
                  email: "john.doe@example.com"
                  role: "user"
      responses:
        '200':
          description: User updated successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/User'
        '400':
          description: Bad request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        '404':
          description: User not found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'

    delete:
      summary: Delete a user by ID
      parameters:
        - name: userId
          in: path
          required: true
          schema:
            type: integer
      responses:
        '204':
          description: User deleted successfully
        '404':
          description: User not found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'

  # Content API Endpoints
  /contents:
    get:
      summary: Get a list of contents
      responses:
        '200':
          description: A list of contents
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Content'

    post:
      summary: Create a new content
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Content'
      responses:
        '201':
          description: Content created successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Content'
        '400':
          description: Invalid input
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'

  /contents/{contentId}:
    get:
      summary: Get a content by ID
      parameters:
        - name: contentId
          in: path
          required: true
          schema:
            type: integer
      responses:
        '200':
          description: A content object
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Content'
        '404':
          description: Content not found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'

    put:
      summary: Update a content by ID
      parameters:
        - name: contentId
          in: path
          required: true
          schema:
            type: integer
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Content'
      responses:
        '200':
          description: Content updated successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Content'
        '400':
          description: Invalid input
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        '404':
          description: Content not found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'

    delete:
      summary: Delete a content by ID
      parameters:
        - name: contentId
          in: path
          required: true
          schema:
            type: integer
      responses:
        '204':
          description: Content deleted successfully
        '404':
          description: Content not found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'

components:
  schemas:
    Author:
      type: object
      properties:
        id:
          type: integer
        givenName:
          type: string
          nullable: true
        surName:
          type: string
          nullable: true
        fullName:
          type: string
        imgsrc:
          type: string
          nullable: true

    Book:
      type: object
      properties:
        id:
          type: integer
        ISBN:
          type: string
        title:
          type: string
        description:
          type: string
        publisher:
          type: string
        authors:
          type: array
          items:
            $ref: '#/components/schemas/Author'
        publishedDate:
          type: string
        copies:
          type: array
          items:
            $ref: '#/components/schemas/BookCopy'
        imgsrc:
          type: string
          nullable: true

    BookCopy:
      type: object
      properties:
        id:
          type: integer
        status:
          type: string
          enum: ['available', 'borrowed']
        borrowerId:
          type: integer
          nullable: true
        borrowDate:
          type: string
          nullable: true
        returnDate:
          type: string
          nullable: true

    User:
      type: object
      properties:
        id:
          type: integer
        givenName:
          type: string
          nullable: true
        surName:
          type: string
          nullable: true
        fullName:
          type: string
        email:
          type: string
        role:
          type: string
          enum: ['user', 'admin']
        imgsrc:
          type: string
          nullable: true
        isBanned:
          type: boolean
          nullable: true

    Content:
      type: object
      properties:
        id:
          type: integer
        type:
          type: string
          enum: ['news', 'book-info']
        title:
          type: string
        content:
          type: string
        imageUrl:
          type: string
          nullable: true
        date:
          type: string
        showOnHomePage:
          type: boolean
          nullable: true
        authorId:
          type: integer

    Error:
      type: object
      properties:
        message:
          type: string
